# coding: utf-8

"""
    AlexisHR API

    <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

    The version of the OpenAPI document: v1-preview
    Contact: support@alexishr.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from alexis_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from alexis_hr_python_sdk.api_response import AsyncGeneratorResponse
from alexis_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from alexis_hr_python_sdk import schemas  # noqa: F401

from alexis_hr_python_sdk.model.forbidden_response import ForbiddenResponse as ForbiddenResponseSchema
from alexis_hr_python_sdk.model.unauthorized_response import UnauthorizedResponse as UnauthorizedResponseSchema
from alexis_hr_python_sdk.model.cost_centers_get_many_response_mapped import CostCentersGetManyResponseMapped as CostCentersGetManyResponseMappedSchema
from alexis_hr_python_sdk.model.internal_server_error_response import InternalServerErrorResponse as InternalServerErrorResponseSchema
from alexis_hr_python_sdk.model.bad_request_response import BadRequestResponse as BadRequestResponseSchema

from alexis_hr_python_sdk.type.cost_centers_get_many_response_mapped import CostCentersGetManyResponseMapped
from alexis_hr_python_sdk.type.forbidden_response import ForbiddenResponse
from alexis_hr_python_sdk.type.bad_request_response import BadRequestResponse
from alexis_hr_python_sdk.type.internal_server_error_response import InternalServerErrorResponse
from alexis_hr_python_sdk.type.unauthorized_response import UnauthorizedResponse

from ...api_client import Dictionary
from alexis_hr_python_sdk.pydantic.internal_server_error_response import InternalServerErrorResponse as InternalServerErrorResponsePydantic
from alexis_hr_python_sdk.pydantic.cost_centers_get_many_response_mapped import CostCentersGetManyResponseMapped as CostCentersGetManyResponseMappedPydantic
from alexis_hr_python_sdk.pydantic.unauthorized_response import UnauthorizedResponse as UnauthorizedResponsePydantic
from alexis_hr_python_sdk.pydantic.bad_request_response import BadRequestResponse as BadRequestResponsePydantic
from alexis_hr_python_sdk.pydantic.forbidden_response import ForbiddenResponse as ForbiddenResponsePydantic

from . import path

# Query params


class SelectSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "id": "ID",
                    "companyId": "COMPANY_ID",
                    "code": "CODE",
                    "name": "NAME",
                }
            
            @schemas.classproperty
            def ID(cls):
                return cls("id")
            
            @schemas.classproperty
            def COMPANY_ID(cls):
                return cls("companyId")
            
            @schemas.classproperty
            def CODE(cls):
                return cls("code")
            
            @schemas.classproperty
            def NAME(cls):
                return cls("name")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SelectSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class FiltersSchema(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        eq = schemas.StrSchema
                        neq = schemas.StrSchema
                        gt = schemas.StrSchema
                        lt = schemas.StrSchema
                        gte = schemas.StrSchema
                        lte = schemas.StrSchema
                        
                        
                        class _in(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> '_in':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class nin(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'nin':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class between(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'between':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        all = schemas.StrSchema
                        __annotations__ = {
                            "$eq": eq,
                            "$neq": neq,
                            "$gt": gt,
                            "$lt": lt,
                            "$gte": gte,
                            "$lte": lte,
                            "$in": _in,
                            "$nin": nin,
                            "$between": between,
                            "$all": all,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$eq"]) -> MetaOapg.properties.eq: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$neq"]) -> MetaOapg.properties.neq: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$gt"]) -> MetaOapg.properties.gt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$lt"]) -> MetaOapg.properties.lt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$gte"]) -> MetaOapg.properties.gte: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$lte"]) -> MetaOapg.properties.lte: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$in"]) -> MetaOapg.properties._in: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$nin"]) -> MetaOapg.properties.nin: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$between"]) -> MetaOapg.properties.between: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$all"]) -> MetaOapg.properties.all: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["$eq", "$neq", "$gt", "$lt", "$gte", "$lte", "$in", "$nin", "$between", "$all", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$eq"]) -> typing.Union[MetaOapg.properties.eq, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$neq"]) -> typing.Union[MetaOapg.properties.neq, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$gt"]) -> typing.Union[MetaOapg.properties.gt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$lt"]) -> typing.Union[MetaOapg.properties.lt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$gte"]) -> typing.Union[MetaOapg.properties.gte, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$lte"]) -> typing.Union[MetaOapg.properties.lte, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$in"]) -> typing.Union[MetaOapg.properties._in, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$nin"]) -> typing.Union[MetaOapg.properties.nin, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$between"]) -> typing.Union[MetaOapg.properties.between, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$all"]) -> typing.Union[MetaOapg.properties.all, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$eq", "$neq", "$gt", "$lt", "$gte", "$lte", "$in", "$nin", "$between", "$all", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class companyId(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        eq = schemas.StrSchema
                        neq = schemas.StrSchema
                        gt = schemas.StrSchema
                        lt = schemas.StrSchema
                        gte = schemas.StrSchema
                        lte = schemas.StrSchema
                        
                        
                        class _in(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> '_in':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class nin(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'nin':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class between(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'between':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        all = schemas.StrSchema
                        __annotations__ = {
                            "$eq": eq,
                            "$neq": neq,
                            "$gt": gt,
                            "$lt": lt,
                            "$gte": gte,
                            "$lte": lte,
                            "$in": _in,
                            "$nin": nin,
                            "$between": between,
                            "$all": all,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$eq"]) -> MetaOapg.properties.eq: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$neq"]) -> MetaOapg.properties.neq: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$gt"]) -> MetaOapg.properties.gt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$lt"]) -> MetaOapg.properties.lt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$gte"]) -> MetaOapg.properties.gte: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$lte"]) -> MetaOapg.properties.lte: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$in"]) -> MetaOapg.properties._in: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$nin"]) -> MetaOapg.properties.nin: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$between"]) -> MetaOapg.properties.between: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$all"]) -> MetaOapg.properties.all: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["$eq", "$neq", "$gt", "$lt", "$gte", "$lte", "$in", "$nin", "$between", "$all", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$eq"]) -> typing.Union[MetaOapg.properties.eq, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$neq"]) -> typing.Union[MetaOapg.properties.neq, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$gt"]) -> typing.Union[MetaOapg.properties.gt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$lt"]) -> typing.Union[MetaOapg.properties.lt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$gte"]) -> typing.Union[MetaOapg.properties.gte, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$lte"]) -> typing.Union[MetaOapg.properties.lte, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$in"]) -> typing.Union[MetaOapg.properties._in, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$nin"]) -> typing.Union[MetaOapg.properties.nin, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$between"]) -> typing.Union[MetaOapg.properties.between, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$all"]) -> typing.Union[MetaOapg.properties.all, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$eq", "$neq", "$gt", "$lt", "$gte", "$lte", "$in", "$nin", "$between", "$all", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'companyId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class code(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        eq = schemas.StrSchema
                        neq = schemas.StrSchema
                        gt = schemas.StrSchema
                        lt = schemas.StrSchema
                        gte = schemas.StrSchema
                        lte = schemas.StrSchema
                        
                        
                        class _in(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> '_in':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class nin(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'nin':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class between(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'between':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        all = schemas.StrSchema
                        __annotations__ = {
                            "$eq": eq,
                            "$neq": neq,
                            "$gt": gt,
                            "$lt": lt,
                            "$gte": gte,
                            "$lte": lte,
                            "$in": _in,
                            "$nin": nin,
                            "$between": between,
                            "$all": all,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$eq"]) -> MetaOapg.properties.eq: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$neq"]) -> MetaOapg.properties.neq: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$gt"]) -> MetaOapg.properties.gt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$lt"]) -> MetaOapg.properties.lt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$gte"]) -> MetaOapg.properties.gte: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$lte"]) -> MetaOapg.properties.lte: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$in"]) -> MetaOapg.properties._in: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$nin"]) -> MetaOapg.properties.nin: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$between"]) -> MetaOapg.properties.between: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$all"]) -> MetaOapg.properties.all: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["$eq", "$neq", "$gt", "$lt", "$gte", "$lte", "$in", "$nin", "$between", "$all", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$eq"]) -> typing.Union[MetaOapg.properties.eq, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$neq"]) -> typing.Union[MetaOapg.properties.neq, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$gt"]) -> typing.Union[MetaOapg.properties.gt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$lt"]) -> typing.Union[MetaOapg.properties.lt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$gte"]) -> typing.Union[MetaOapg.properties.gte, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$lte"]) -> typing.Union[MetaOapg.properties.lte, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$in"]) -> typing.Union[MetaOapg.properties._in, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$nin"]) -> typing.Union[MetaOapg.properties.nin, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$between"]) -> typing.Union[MetaOapg.properties.between, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$all"]) -> typing.Union[MetaOapg.properties.all, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$eq", "$neq", "$gt", "$lt", "$gte", "$lte", "$in", "$nin", "$between", "$all", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'code':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class name(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        eq = schemas.StrSchema
                        neq = schemas.StrSchema
                        gt = schemas.StrSchema
                        lt = schemas.StrSchema
                        gte = schemas.StrSchema
                        lte = schemas.StrSchema
                        
                        
                        class _in(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> '_in':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class nin(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'nin':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class between(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'between':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        all = schemas.StrSchema
                        __annotations__ = {
                            "$eq": eq,
                            "$neq": neq,
                            "$gt": gt,
                            "$lt": lt,
                            "$gte": gte,
                            "$lte": lte,
                            "$in": _in,
                            "$nin": nin,
                            "$between": between,
                            "$all": all,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$eq"]) -> MetaOapg.properties.eq: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$neq"]) -> MetaOapg.properties.neq: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$gt"]) -> MetaOapg.properties.gt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$lt"]) -> MetaOapg.properties.lt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$gte"]) -> MetaOapg.properties.gte: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$lte"]) -> MetaOapg.properties.lte: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$in"]) -> MetaOapg.properties._in: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$nin"]) -> MetaOapg.properties.nin: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$between"]) -> MetaOapg.properties.between: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["$all"]) -> MetaOapg.properties.all: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["$eq", "$neq", "$gt", "$lt", "$gte", "$lte", "$in", "$nin", "$between", "$all", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$eq"]) -> typing.Union[MetaOapg.properties.eq, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$neq"]) -> typing.Union[MetaOapg.properties.neq, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$gt"]) -> typing.Union[MetaOapg.properties.gt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$lt"]) -> typing.Union[MetaOapg.properties.lt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$gte"]) -> typing.Union[MetaOapg.properties.gte, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$lte"]) -> typing.Union[MetaOapg.properties.lte, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$in"]) -> typing.Union[MetaOapg.properties._in, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$nin"]) -> typing.Union[MetaOapg.properties.nin, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$between"]) -> typing.Union[MetaOapg.properties.between, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["$all"]) -> typing.Union[MetaOapg.properties.all, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$eq", "$neq", "$gt", "$lt", "$gte", "$lte", "$in", "$nin", "$between", "$all", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "companyId": companyId,
                "code": code,
                "name": name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "companyId", "code", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "companyId", "code", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FiltersSchema':
        return super().__new__(
            cls,
            *args,
            id=id,
            companyId=companyId,
            code=code,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )
LimitSchema = schemas.IntSchema
OffsetSchema = schemas.IntSchema


class SortSchema(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "asc": "ASC",
                        "desc": "DESC",
                    }
                
                @schemas.classproperty
                def ASC(cls):
                    return cls("asc")
                
                @schemas.classproperty
                def DESC(cls):
                    return cls("desc")
            
            
            class companyId(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "asc": "ASC",
                        "desc": "DESC",
                    }
                
                @schemas.classproperty
                def ASC(cls):
                    return cls("asc")
                
                @schemas.classproperty
                def DESC(cls):
                    return cls("desc")
            
            
            class code(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "asc": "ASC",
                        "desc": "DESC",
                    }
                
                @schemas.classproperty
                def ASC(cls):
                    return cls("asc")
                
                @schemas.classproperty
                def DESC(cls):
                    return cls("desc")
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "asc": "ASC",
                        "desc": "DESC",
                    }
                
                @schemas.classproperty
                def ASC(cls):
                    return cls("asc")
                
                @schemas.classproperty
                def DESC(cls):
                    return cls("desc")
            __annotations__ = {
                "id": id,
                "companyId": companyId,
                "code": code,
                "name": name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "companyId", "code", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "companyId", "code", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SortSchema':
        return super().__new__(
            cls,
            *args,
            id=id,
            companyId=companyId,
            code=code,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'select': typing.Union[SelectSchema, list, tuple, ],
        'filters': typing.Union[FiltersSchema, dict, frozendict.frozendict, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'offset': typing.Union[OffsetSchema, decimal.Decimal, int, ],
        'sort': typing.Union[SortSchema, dict, frozendict.frozendict, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_select = api_client.QueryParameter(
    name="select",
    style=api_client.ParameterStyle.FORM,
    schema=SelectSchema,
)
request_query_filters = api_client.QueryParameter(
    name="filters",
    style=api_client.ParameterStyle.DEEP_OBJECT,
    schema=FiltersSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_offset = api_client.QueryParameter(
    name="offset",
    style=api_client.ParameterStyle.FORM,
    schema=OffsetSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.DEEP_OBJECT,
    schema=SortSchema,
    explode=True,
)
_auth = [
    'bearer',
]
SchemaFor200ResponseBodyApplicationJson = CostCentersGetManyResponseMappedSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: CostCentersGetManyResponseMapped


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: CostCentersGetManyResponseMapped


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = BadRequestResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: BadRequestResponse


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: BadRequestResponse


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = UnauthorizedResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: UnauthorizedResponse


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: UnauthorizedResponse


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = ForbiddenResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: ForbiddenResponse


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: ForbiddenResponse


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = InternalServerErrorResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: InternalServerErrorResponse


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: InternalServerErrorResponse


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _get_many_mapped_args(
        self,
        select: typing.Optional[typing.List[str]] = None,
        filters: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if select is not None:
            _query_params["select"] = select
        if filters is not None:
            _query_params["filters"] = filters
        if limit is not None:
            _query_params["limit"] = limit
        if offset is not None:
            _query_params["offset"] = offset
        if sort is not None:
            _query_params["sort"] = sort
        args.query = _query_params
        return args

    async def _aget_many_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get Many Cost Centers
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_select,
            request_query_filters,
            request_query_limit,
            request_query_offset,
            request_query_sort,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/cost-center',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_many_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get Many Cost Centers
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_select,
            request_query_filters,
            request_query_limit,
            request_query_offset,
            request_query_sort,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/cost-center',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetManyRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_many(
        self,
        select: typing.Optional[typing.List[str]] = None,
        filters: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_many_mapped_args(
            select=select,
            filters=filters,
            limit=limit,
            offset=offset,
            sort=sort,
        )
        return await self._aget_many_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get_many(
        self,
        select: typing.Optional[typing.List[str]] = None,
        filters: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_many_mapped_args(
            select=select,
            filters=filters,
            limit=limit,
            offset=offset,
            sort=sort,
        )
        return self._get_many_oapg(
            query_params=args.query,
        )

class GetMany(BaseApi):

    async def aget_many(
        self,
        select: typing.Optional[typing.List[str]] = None,
        filters: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        validate: bool = False,
        **kwargs,
    ) -> CostCentersGetManyResponseMappedPydantic:
        raw_response = await self.raw.aget_many(
            select=select,
            filters=filters,
            limit=limit,
            offset=offset,
            sort=sort,
            **kwargs,
        )
        if validate:
            return CostCentersGetManyResponseMappedPydantic(**raw_response.body)
        return api_client.construct_model_instance(CostCentersGetManyResponseMappedPydantic, raw_response.body)
    
    
    def get_many(
        self,
        select: typing.Optional[typing.List[str]] = None,
        filters: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        validate: bool = False,
    ) -> CostCentersGetManyResponseMappedPydantic:
        raw_response = self.raw.get_many(
            select=select,
            filters=filters,
            limit=limit,
            offset=offset,
            sort=sort,
        )
        if validate:
            return CostCentersGetManyResponseMappedPydantic(**raw_response.body)
        return api_client.construct_model_instance(CostCentersGetManyResponseMappedPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        select: typing.Optional[typing.List[str]] = None,
        filters: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_many_mapped_args(
            select=select,
            filters=filters,
            limit=limit,
            offset=offset,
            sort=sort,
        )
        return await self._aget_many_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        select: typing.Optional[typing.List[str]] = None,
        filters: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        sort: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_many_mapped_args(
            select=select,
            filters=filters,
            limit=limit,
            offset=offset,
            sort=sort,
        )
        return self._get_many_oapg(
            query_params=args.query,
        )

