# coding: utf-8

"""
    AlexisHR API

    <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

    The version of the OpenAPI document: v1-preview
    Contact: support@alexishr.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from alexis_hr_python_sdk import schemas  # noqa: F401


class CompensationResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "paidOvertime",
            "payoutPeriod",
            "amount",
            "employeeId",
            "baseAmount",
            "salarySchedule",
            "companyId",
            "payoutDay",
            "exchangeRate",
            "payoutFrequency",
            "currency",
            "id",
            "effectiveDate",
        }
        
        class properties:
            id = schemas.StrSchema
            employeeId = schemas.StrSchema
            companyId = schemas.StrSchema
            amount = schemas.NumberSchema
            effectiveDate = schemas.DateTimeSchema
            baseAmount = schemas.NumberSchema
            exchangeRate = schemas.NumberSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SEK": "SEK",
                        "NOK": "NOK",
                        "DKK": "DKK",
                        "EUR": "EUR",
                        "USD": "USD",
                        "AED": "AED",
                        "AFN": "AFN",
                        "ALL": "ALL",
                        "AMD": "AMD",
                        "ANG": "ANG",
                        "AOA": "AOA",
                        "ARS": "ARS",
                        "AUD": "AUD",
                        "AWG": "AWG",
                        "AZN": "AZN",
                        "BAM": "BAM",
                        "BBD": "BBD",
                        "BDT": "BDT",
                        "BGN": "BGN",
                        "BHD": "BHD",
                        "BIF": "BIF",
                        "BMD": "BMD",
                        "BND": "BND",
                        "BOB": "BOB",
                        "BRL": "BRL",
                        "BSD": "BSD",
                        "BTC": "BTC",
                        "BTN": "BTN",
                        "BWP": "BWP",
                        "BYN": "BYN",
                        "BZD": "BZD",
                        "CAD": "CAD",
                        "CDF": "CDF",
                        "CHF": "CHF",
                        "CLF": "CLF",
                        "CLP": "CLP",
                        "CNH": "CNH",
                        "CNY": "CNY",
                        "COP": "COP",
                        "CRC": "CRC",
                        "CUC": "CUC",
                        "CUP": "CUP",
                        "CVE": "CVE",
                        "CZK": "CZK",
                        "DJF": "DJF",
                        "DOP": "DOP",
                        "DZD": "DZD",
                        "EGP": "EGP",
                        "ERN": "ERN",
                        "ETB": "ETB",
                        "FJD": "FJD",
                        "FKP": "FKP",
                        "GBP": "GBP",
                        "GEL": "GEL",
                        "GGP": "GGP",
                        "GHS": "GHS",
                        "GIP": "GIP",
                        "GMD": "GMD",
                        "GNF": "GNF",
                        "GTQ": "GTQ",
                        "GYD": "GYD",
                        "HKD": "HKD",
                        "HNL": "HNL",
                        "HRK": "HRK",
                        "HTG": "HTG",
                        "HUF": "HUF",
                        "IDR": "IDR",
                        "ILS": "ILS",
                        "IMP": "IMP",
                        "INR": "INR",
                        "IQD": "IQD",
                        "IRR": "IRR",
                        "ISK": "ISK",
                        "JEP": "JEP",
                        "JMD": "JMD",
                        "JOD": "JOD",
                        "JPY": "JPY",
                        "KES": "KES",
                        "KGS": "KGS",
                        "KHR": "KHR",
                        "KMF": "KMF",
                        "KPW": "KPW",
                        "KRW": "KRW",
                        "KWD": "KWD",
                        "KYD": "KYD",
                        "KZT": "KZT",
                        "LAK": "LAK",
                        "LBP": "LBP",
                        "LKR": "LKR",
                        "LRD": "LRD",
                        "LSL": "LSL",
                        "LYD": "LYD",
                        "MAD": "MAD",
                        "MDL": "MDL",
                        "MGA": "MGA",
                        "MKD": "MKD",
                        "MMK": "MMK",
                        "MNT": "MNT",
                        "MOP": "MOP",
                        "MRO": "MRO",
                        "MRU": "MRU",
                        "MUR": "MUR",
                        "MVR": "MVR",
                        "MWK": "MWK",
                        "MXN": "MXN",
                        "MYR": "MYR",
                        "MZN": "MZN",
                        "NAD": "NAD",
                        "NGN": "NGN",
                        "NIO": "NIO",
                        "NPR": "NPR",
                        "NZD": "NZD",
                        "OMR": "OMR",
                        "PAB": "PAB",
                        "PEN": "PEN",
                        "PGK": "PGK",
                        "PHP": "PHP",
                        "PKR": "PKR",
                        "PLN": "PLN",
                        "PYG": "PYG",
                        "QAR": "QAR",
                        "RON": "RON",
                        "RSD": "RSD",
                        "RUB": "RUB",
                        "RWF": "RWF",
                        "SAR": "SAR",
                        "SBD": "SBD",
                        "SCR": "SCR",
                        "SDG": "SDG",
                        "SGD": "SGD",
                        "SHP": "SHP",
                        "SLL": "SLL",
                        "SOS": "SOS",
                        "SRD": "SRD",
                        "SSP": "SSP",
                        "STD": "STD",
                        "STN": "STN",
                        "SVC": "SVC",
                        "SYP": "SYP",
                        "SZL": "SZL",
                        "THB": "THB",
                        "TJS": "TJS",
                        "TMT": "TMT",
                        "TND": "TND",
                        "TOP": "TOP",
                        "TRY": "TRY",
                        "TTD": "TTD",
                        "TWD": "TWD",
                        "TZS": "TZS",
                        "UAH": "UAH",
                        "UGX": "UGX",
                        "UYU": "UYU",
                        "UZS": "UZS",
                        "VEF": "VEF",
                        "VND": "VND",
                        "VUV": "VUV",
                        "WST": "WST",
                        "XAF": "XAF",
                        "XAG": "XAG",
                        "XAU": "XAU",
                        "XCD": "XCD",
                        "XDR": "XDR",
                        "XOF": "XOF",
                        "XPD": "XPD",
                        "XPF": "XPF",
                        "XPT": "XPT",
                        "YER": "YER",
                        "ZAR": "ZAR",
                        "ZMW": "ZMW",
                        "ZWL": "ZWL",
                    }
                
                @schemas.classproperty
                def SEK(cls):
                    return cls("SEK")
                
                @schemas.classproperty
                def NOK(cls):
                    return cls("NOK")
                
                @schemas.classproperty
                def DKK(cls):
                    return cls("DKK")
                
                @schemas.classproperty
                def EUR(cls):
                    return cls("EUR")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
                
                @schemas.classproperty
                def AED(cls):
                    return cls("AED")
                
                @schemas.classproperty
                def AFN(cls):
                    return cls("AFN")
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("ALL")
                
                @schemas.classproperty
                def AMD(cls):
                    return cls("AMD")
                
                @schemas.classproperty
                def ANG(cls):
                    return cls("ANG")
                
                @schemas.classproperty
                def AOA(cls):
                    return cls("AOA")
                
                @schemas.classproperty
                def ARS(cls):
                    return cls("ARS")
                
                @schemas.classproperty
                def AUD(cls):
                    return cls("AUD")
                
                @schemas.classproperty
                def AWG(cls):
                    return cls("AWG")
                
                @schemas.classproperty
                def AZN(cls):
                    return cls("AZN")
                
                @schemas.classproperty
                def BAM(cls):
                    return cls("BAM")
                
                @schemas.classproperty
                def BBD(cls):
                    return cls("BBD")
                
                @schemas.classproperty
                def BDT(cls):
                    return cls("BDT")
                
                @schemas.classproperty
                def BGN(cls):
                    return cls("BGN")
                
                @schemas.classproperty
                def BHD(cls):
                    return cls("BHD")
                
                @schemas.classproperty
                def BIF(cls):
                    return cls("BIF")
                
                @schemas.classproperty
                def BMD(cls):
                    return cls("BMD")
                
                @schemas.classproperty
                def BND(cls):
                    return cls("BND")
                
                @schemas.classproperty
                def BOB(cls):
                    return cls("BOB")
                
                @schemas.classproperty
                def BRL(cls):
                    return cls("BRL")
                
                @schemas.classproperty
                def BSD(cls):
                    return cls("BSD")
                
                @schemas.classproperty
                def BTC(cls):
                    return cls("BTC")
                
                @schemas.classproperty
                def BTN(cls):
                    return cls("BTN")
                
                @schemas.classproperty
                def BWP(cls):
                    return cls("BWP")
                
                @schemas.classproperty
                def BYN(cls):
                    return cls("BYN")
                
                @schemas.classproperty
                def BZD(cls):
                    return cls("BZD")
                
                @schemas.classproperty
                def CAD(cls):
                    return cls("CAD")
                
                @schemas.classproperty
                def CDF(cls):
                    return cls("CDF")
                
                @schemas.classproperty
                def CHF(cls):
                    return cls("CHF")
                
                @schemas.classproperty
                def CLF(cls):
                    return cls("CLF")
                
                @schemas.classproperty
                def CLP(cls):
                    return cls("CLP")
                
                @schemas.classproperty
                def CNH(cls):
                    return cls("CNH")
                
                @schemas.classproperty
                def CNY(cls):
                    return cls("CNY")
                
                @schemas.classproperty
                def COP(cls):
                    return cls("COP")
                
                @schemas.classproperty
                def CRC(cls):
                    return cls("CRC")
                
                @schemas.classproperty
                def CUC(cls):
                    return cls("CUC")
                
                @schemas.classproperty
                def CUP(cls):
                    return cls("CUP")
                
                @schemas.classproperty
                def CVE(cls):
                    return cls("CVE")
                
                @schemas.classproperty
                def CZK(cls):
                    return cls("CZK")
                
                @schemas.classproperty
                def DJF(cls):
                    return cls("DJF")
                
                @schemas.classproperty
                def DOP(cls):
                    return cls("DOP")
                
                @schemas.classproperty
                def DZD(cls):
                    return cls("DZD")
                
                @schemas.classproperty
                def EGP(cls):
                    return cls("EGP")
                
                @schemas.classproperty
                def ERN(cls):
                    return cls("ERN")
                
                @schemas.classproperty
                def ETB(cls):
                    return cls("ETB")
                
                @schemas.classproperty
                def FJD(cls):
                    return cls("FJD")
                
                @schemas.classproperty
                def FKP(cls):
                    return cls("FKP")
                
                @schemas.classproperty
                def GBP(cls):
                    return cls("GBP")
                
                @schemas.classproperty
                def GEL(cls):
                    return cls("GEL")
                
                @schemas.classproperty
                def GGP(cls):
                    return cls("GGP")
                
                @schemas.classproperty
                def GHS(cls):
                    return cls("GHS")
                
                @schemas.classproperty
                def GIP(cls):
                    return cls("GIP")
                
                @schemas.classproperty
                def GMD(cls):
                    return cls("GMD")
                
                @schemas.classproperty
                def GNF(cls):
                    return cls("GNF")
                
                @schemas.classproperty
                def GTQ(cls):
                    return cls("GTQ")
                
                @schemas.classproperty
                def GYD(cls):
                    return cls("GYD")
                
                @schemas.classproperty
                def HKD(cls):
                    return cls("HKD")
                
                @schemas.classproperty
                def HNL(cls):
                    return cls("HNL")
                
                @schemas.classproperty
                def HRK(cls):
                    return cls("HRK")
                
                @schemas.classproperty
                def HTG(cls):
                    return cls("HTG")
                
                @schemas.classproperty
                def HUF(cls):
                    return cls("HUF")
                
                @schemas.classproperty
                def IDR(cls):
                    return cls("IDR")
                
                @schemas.classproperty
                def ILS(cls):
                    return cls("ILS")
                
                @schemas.classproperty
                def IMP(cls):
                    return cls("IMP")
                
                @schemas.classproperty
                def INR(cls):
                    return cls("INR")
                
                @schemas.classproperty
                def IQD(cls):
                    return cls("IQD")
                
                @schemas.classproperty
                def IRR(cls):
                    return cls("IRR")
                
                @schemas.classproperty
                def ISK(cls):
                    return cls("ISK")
                
                @schemas.classproperty
                def JEP(cls):
                    return cls("JEP")
                
                @schemas.classproperty
                def JMD(cls):
                    return cls("JMD")
                
                @schemas.classproperty
                def JOD(cls):
                    return cls("JOD")
                
                @schemas.classproperty
                def JPY(cls):
                    return cls("JPY")
                
                @schemas.classproperty
                def KES(cls):
                    return cls("KES")
                
                @schemas.classproperty
                def KGS(cls):
                    return cls("KGS")
                
                @schemas.classproperty
                def KHR(cls):
                    return cls("KHR")
                
                @schemas.classproperty
                def KMF(cls):
                    return cls("KMF")
                
                @schemas.classproperty
                def KPW(cls):
                    return cls("KPW")
                
                @schemas.classproperty
                def KRW(cls):
                    return cls("KRW")
                
                @schemas.classproperty
                def KWD(cls):
                    return cls("KWD")
                
                @schemas.classproperty
                def KYD(cls):
                    return cls("KYD")
                
                @schemas.classproperty
                def KZT(cls):
                    return cls("KZT")
                
                @schemas.classproperty
                def LAK(cls):
                    return cls("LAK")
                
                @schemas.classproperty
                def LBP(cls):
                    return cls("LBP")
                
                @schemas.classproperty
                def LKR(cls):
                    return cls("LKR")
                
                @schemas.classproperty
                def LRD(cls):
                    return cls("LRD")
                
                @schemas.classproperty
                def LSL(cls):
                    return cls("LSL")
                
                @schemas.classproperty
                def LYD(cls):
                    return cls("LYD")
                
                @schemas.classproperty
                def MAD(cls):
                    return cls("MAD")
                
                @schemas.classproperty
                def MDL(cls):
                    return cls("MDL")
                
                @schemas.classproperty
                def MGA(cls):
                    return cls("MGA")
                
                @schemas.classproperty
                def MKD(cls):
                    return cls("MKD")
                
                @schemas.classproperty
                def MMK(cls):
                    return cls("MMK")
                
                @schemas.classproperty
                def MNT(cls):
                    return cls("MNT")
                
                @schemas.classproperty
                def MOP(cls):
                    return cls("MOP")
                
                @schemas.classproperty
                def MRO(cls):
                    return cls("MRO")
                
                @schemas.classproperty
                def MRU(cls):
                    return cls("MRU")
                
                @schemas.classproperty
                def MUR(cls):
                    return cls("MUR")
                
                @schemas.classproperty
                def MVR(cls):
                    return cls("MVR")
                
                @schemas.classproperty
                def MWK(cls):
                    return cls("MWK")
                
                @schemas.classproperty
                def MXN(cls):
                    return cls("MXN")
                
                @schemas.classproperty
                def MYR(cls):
                    return cls("MYR")
                
                @schemas.classproperty
                def MZN(cls):
                    return cls("MZN")
                
                @schemas.classproperty
                def NAD(cls):
                    return cls("NAD")
                
                @schemas.classproperty
                def NGN(cls):
                    return cls("NGN")
                
                @schemas.classproperty
                def NIO(cls):
                    return cls("NIO")
                
                @schemas.classproperty
                def NPR(cls):
                    return cls("NPR")
                
                @schemas.classproperty
                def NZD(cls):
                    return cls("NZD")
                
                @schemas.classproperty
                def OMR(cls):
                    return cls("OMR")
                
                @schemas.classproperty
                def PAB(cls):
                    return cls("PAB")
                
                @schemas.classproperty
                def PEN(cls):
                    return cls("PEN")
                
                @schemas.classproperty
                def PGK(cls):
                    return cls("PGK")
                
                @schemas.classproperty
                def PHP(cls):
                    return cls("PHP")
                
                @schemas.classproperty
                def PKR(cls):
                    return cls("PKR")
                
                @schemas.classproperty
                def PLN(cls):
                    return cls("PLN")
                
                @schemas.classproperty
                def PYG(cls):
                    return cls("PYG")
                
                @schemas.classproperty
                def QAR(cls):
                    return cls("QAR")
                
                @schemas.classproperty
                def RON(cls):
                    return cls("RON")
                
                @schemas.classproperty
                def RSD(cls):
                    return cls("RSD")
                
                @schemas.classproperty
                def RUB(cls):
                    return cls("RUB")
                
                @schemas.classproperty
                def RWF(cls):
                    return cls("RWF")
                
                @schemas.classproperty
                def SAR(cls):
                    return cls("SAR")
                
                @schemas.classproperty
                def SBD(cls):
                    return cls("SBD")
                
                @schemas.classproperty
                def SCR(cls):
                    return cls("SCR")
                
                @schemas.classproperty
                def SDG(cls):
                    return cls("SDG")
                
                @schemas.classproperty
                def SGD(cls):
                    return cls("SGD")
                
                @schemas.classproperty
                def SHP(cls):
                    return cls("SHP")
                
                @schemas.classproperty
                def SLL(cls):
                    return cls("SLL")
                
                @schemas.classproperty
                def SOS(cls):
                    return cls("SOS")
                
                @schemas.classproperty
                def SRD(cls):
                    return cls("SRD")
                
                @schemas.classproperty
                def SSP(cls):
                    return cls("SSP")
                
                @schemas.classproperty
                def STD(cls):
                    return cls("STD")
                
                @schemas.classproperty
                def STN(cls):
                    return cls("STN")
                
                @schemas.classproperty
                def SVC(cls):
                    return cls("SVC")
                
                @schemas.classproperty
                def SYP(cls):
                    return cls("SYP")
                
                @schemas.classproperty
                def SZL(cls):
                    return cls("SZL")
                
                @schemas.classproperty
                def THB(cls):
                    return cls("THB")
                
                @schemas.classproperty
                def TJS(cls):
                    return cls("TJS")
                
                @schemas.classproperty
                def TMT(cls):
                    return cls("TMT")
                
                @schemas.classproperty
                def TND(cls):
                    return cls("TND")
                
                @schemas.classproperty
                def TOP(cls):
                    return cls("TOP")
                
                @schemas.classproperty
                def TRY(cls):
                    return cls("TRY")
                
                @schemas.classproperty
                def TTD(cls):
                    return cls("TTD")
                
                @schemas.classproperty
                def TWD(cls):
                    return cls("TWD")
                
                @schemas.classproperty
                def TZS(cls):
                    return cls("TZS")
                
                @schemas.classproperty
                def UAH(cls):
                    return cls("UAH")
                
                @schemas.classproperty
                def UGX(cls):
                    return cls("UGX")
                
                @schemas.classproperty
                def UYU(cls):
                    return cls("UYU")
                
                @schemas.classproperty
                def UZS(cls):
                    return cls("UZS")
                
                @schemas.classproperty
                def VEF(cls):
                    return cls("VEF")
                
                @schemas.classproperty
                def VND(cls):
                    return cls("VND")
                
                @schemas.classproperty
                def VUV(cls):
                    return cls("VUV")
                
                @schemas.classproperty
                def WST(cls):
                    return cls("WST")
                
                @schemas.classproperty
                def XAF(cls):
                    return cls("XAF")
                
                @schemas.classproperty
                def XAG(cls):
                    return cls("XAG")
                
                @schemas.classproperty
                def XAU(cls):
                    return cls("XAU")
                
                @schemas.classproperty
                def XCD(cls):
                    return cls("XCD")
                
                @schemas.classproperty
                def XDR(cls):
                    return cls("XDR")
                
                @schemas.classproperty
                def XOF(cls):
                    return cls("XOF")
                
                @schemas.classproperty
                def XPD(cls):
                    return cls("XPD")
                
                @schemas.classproperty
                def XPF(cls):
                    return cls("XPF")
                
                @schemas.classproperty
                def XPT(cls):
                    return cls("XPT")
                
                @schemas.classproperty
                def YER(cls):
                    return cls("YER")
                
                @schemas.classproperty
                def ZAR(cls):
                    return cls("ZAR")
                
                @schemas.classproperty
                def ZMW(cls):
                    return cls("ZMW")
                
                @schemas.classproperty
                def ZWL(cls):
                    return cls("ZWL")
            payoutDay = schemas.NumberSchema
            
            
            class payoutPeriod(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "HOURLY": "HOURLY",
                        "DAILY": "DAILY",
                        "WEEKLY": "WEEKLY",
                        "BI_WEEKLY": "BI_WEEKLY",
                        "MONTHLY": "MONTHLY",
                        "QUARTERLY": "QUARTERLY",
                        "ANNUAL": "ANNUAL",
                    }
                
                @schemas.classproperty
                def HOURLY(cls):
                    return cls("HOURLY")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("DAILY")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("WEEKLY")
                
                @schemas.classproperty
                def BI_WEEKLY(cls):
                    return cls("BI_WEEKLY")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("MONTHLY")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("QUARTERLY")
                
                @schemas.classproperty
                def ANNUAL(cls):
                    return cls("ANNUAL")
            
            
            class payoutFrequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "WEEK": "WEEK",
                        "BI_WEEKLY": "BI_WEEKLY",
                        "MONTH": "MONTH",
                    }
                
                @schemas.classproperty
                def WEEK(cls):
                    return cls("WEEK")
                
                @schemas.classproperty
                def BI_WEEKLY(cls):
                    return cls("BI_WEEKLY")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("MONTH")
            
            
            class salarySchedule(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADVANCE": "ADVANCE",
                        "DELAYED": "DELAYED",
                    }
                
                @schemas.classproperty
                def ADVANCE(cls):
                    return cls("ADVANCE")
                
                @schemas.classproperty
                def DELAYED(cls):
                    return cls("DELAYED")
            paidOvertime = schemas.BoolSchema
            note = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "employeeId": employeeId,
                "companyId": companyId,
                "amount": amount,
                "effectiveDate": effectiveDate,
                "baseAmount": baseAmount,
                "exchangeRate": exchangeRate,
                "currency": currency,
                "payoutDay": payoutDay,
                "payoutPeriod": payoutPeriod,
                "payoutFrequency": payoutFrequency,
                "salarySchedule": salarySchedule,
                "paidOvertime": paidOvertime,
                "note": note,
            }
    
    paidOvertime: MetaOapg.properties.paidOvertime
    payoutPeriod: MetaOapg.properties.payoutPeriod
    amount: MetaOapg.properties.amount
    employeeId: MetaOapg.properties.employeeId
    baseAmount: MetaOapg.properties.baseAmount
    salarySchedule: MetaOapg.properties.salarySchedule
    companyId: MetaOapg.properties.companyId
    payoutDay: MetaOapg.properties.payoutDay
    exchangeRate: MetaOapg.properties.exchangeRate
    payoutFrequency: MetaOapg.properties.payoutFrequency
    currency: MetaOapg.properties.currency
    id: MetaOapg.properties.id
    effectiveDate: MetaOapg.properties.effectiveDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseAmount"]) -> MetaOapg.properties.baseAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeRate"]) -> MetaOapg.properties.exchangeRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payoutDay"]) -> MetaOapg.properties.payoutDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payoutPeriod"]) -> MetaOapg.properties.payoutPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payoutFrequency"]) -> MetaOapg.properties.payoutFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salarySchedule"]) -> MetaOapg.properties.salarySchedule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidOvertime"]) -> MetaOapg.properties.paidOvertime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "employeeId", "companyId", "amount", "effectiveDate", "baseAmount", "exchangeRate", "currency", "payoutDay", "payoutPeriod", "payoutFrequency", "salarySchedule", "paidOvertime", "note", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseAmount"]) -> MetaOapg.properties.baseAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeRate"]) -> MetaOapg.properties.exchangeRate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payoutDay"]) -> MetaOapg.properties.payoutDay: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payoutPeriod"]) -> MetaOapg.properties.payoutPeriod: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payoutFrequency"]) -> MetaOapg.properties.payoutFrequency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salarySchedule"]) -> MetaOapg.properties.salarySchedule: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidOvertime"]) -> MetaOapg.properties.paidOvertime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "employeeId", "companyId", "amount", "effectiveDate", "baseAmount", "exchangeRate", "currency", "payoutDay", "payoutPeriod", "payoutFrequency", "salarySchedule", "paidOvertime", "note", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paidOvertime: typing.Union[MetaOapg.properties.paidOvertime, bool, ],
        payoutPeriod: typing.Union[MetaOapg.properties.payoutPeriod, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, ],
        baseAmount: typing.Union[MetaOapg.properties.baseAmount, decimal.Decimal, int, float, ],
        salarySchedule: typing.Union[MetaOapg.properties.salarySchedule, str, ],
        companyId: typing.Union[MetaOapg.properties.companyId, str, ],
        payoutDay: typing.Union[MetaOapg.properties.payoutDay, decimal.Decimal, int, float, ],
        exchangeRate: typing.Union[MetaOapg.properties.exchangeRate, decimal.Decimal, int, float, ],
        payoutFrequency: typing.Union[MetaOapg.properties.payoutFrequency, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, datetime, ],
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompensationResponse':
        return super().__new__(
            cls,
            *args,
            paidOvertime=paidOvertime,
            payoutPeriod=payoutPeriod,
            amount=amount,
            employeeId=employeeId,
            baseAmount=baseAmount,
            salarySchedule=salarySchedule,
            companyId=companyId,
            payoutDay=payoutDay,
            exchangeRate=exchangeRate,
            payoutFrequency=payoutFrequency,
            currency=currency,
            id=id,
            effectiveDate=effectiveDate,
            note=note,
            _configuration=_configuration,
            **kwargs,
        )
