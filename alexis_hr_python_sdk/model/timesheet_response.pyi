# coding: utf-8

"""
    AlexisHR API

    <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

    The version of the OpenAPI document: v1-preview
    Contact: support@alexishr.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from alexis_hr_python_sdk import schemas  # noqa: F401


class TimesheetResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "approvalDate",
            "endDate",
            "timezone",
            "submitDate",
            "employeeId",
            "rejectedDate",
            "utcCutOffDate",
            "localCutOffDate",
            "interval",
            "approvalDeadlineDate",
            "id",
            "startDate",
            "approverEmployeeId",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def SUBMITTED(cls):
                    return cls("SUBMITTED")
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("APPROVED")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("REJECTED")
            startDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            localCutOffDate = schemas.DateTimeSchema
            utcCutOffDate = schemas.DateTimeSchema
            approvalDeadlineDate = schemas.DateTimeSchema
            
            
            class interval(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("WEEKLY")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("MONTHLY")
            approverEmployeeId = schemas.StrSchema
            employeeId = schemas.StrSchema
            submitDate = schemas.DateTimeSchema
            approvalDate = schemas.DateTimeSchema
            rejectedDate = schemas.DateTimeSchema
            timezone = schemas.StrSchema
            note = schemas.StrSchema
            updated = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "status": status,
                "startDate": startDate,
                "endDate": endDate,
                "localCutOffDate": localCutOffDate,
                "utcCutOffDate": utcCutOffDate,
                "approvalDeadlineDate": approvalDeadlineDate,
                "interval": interval,
                "approverEmployeeId": approverEmployeeId,
                "employeeId": employeeId,
                "submitDate": submitDate,
                "approvalDate": approvalDate,
                "rejectedDate": rejectedDate,
                "timezone": timezone,
                "note": note,
                "updated": updated,
            }
    
    approvalDate: MetaOapg.properties.approvalDate
    endDate: MetaOapg.properties.endDate
    timezone: MetaOapg.properties.timezone
    submitDate: MetaOapg.properties.submitDate
    employeeId: MetaOapg.properties.employeeId
    rejectedDate: MetaOapg.properties.rejectedDate
    utcCutOffDate: MetaOapg.properties.utcCutOffDate
    localCutOffDate: MetaOapg.properties.localCutOffDate
    interval: MetaOapg.properties.interval
    approvalDeadlineDate: MetaOapg.properties.approvalDeadlineDate
    id: MetaOapg.properties.id
    startDate: MetaOapg.properties.startDate
    approverEmployeeId: MetaOapg.properties.approverEmployeeId
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localCutOffDate"]) -> MetaOapg.properties.localCutOffDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utcCutOffDate"]) -> MetaOapg.properties.utcCutOffDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalDeadlineDate"]) -> MetaOapg.properties.approvalDeadlineDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approverEmployeeId"]) -> MetaOapg.properties.approverEmployeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitDate"]) -> MetaOapg.properties.submitDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalDate"]) -> MetaOapg.properties.approvalDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rejectedDate"]) -> MetaOapg.properties.rejectedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "startDate", "endDate", "localCutOffDate", "utcCutOffDate", "approvalDeadlineDate", "interval", "approverEmployeeId", "employeeId", "submitDate", "approvalDate", "rejectedDate", "timezone", "note", "updated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localCutOffDate"]) -> MetaOapg.properties.localCutOffDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utcCutOffDate"]) -> MetaOapg.properties.utcCutOffDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalDeadlineDate"]) -> MetaOapg.properties.approvalDeadlineDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approverEmployeeId"]) -> MetaOapg.properties.approverEmployeeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitDate"]) -> MetaOapg.properties.submitDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalDate"]) -> MetaOapg.properties.approvalDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rejectedDate"]) -> MetaOapg.properties.rejectedDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "startDate", "endDate", "localCutOffDate", "utcCutOffDate", "approvalDeadlineDate", "interval", "approverEmployeeId", "employeeId", "submitDate", "approvalDate", "rejectedDate", "timezone", "note", "updated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        approvalDate: typing.Union[MetaOapg.properties.approvalDate, str, datetime, ],
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, ],
        timezone: typing.Union[MetaOapg.properties.timezone, str, ],
        submitDate: typing.Union[MetaOapg.properties.submitDate, str, datetime, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, ],
        rejectedDate: typing.Union[MetaOapg.properties.rejectedDate, str, datetime, ],
        utcCutOffDate: typing.Union[MetaOapg.properties.utcCutOffDate, str, datetime, ],
        localCutOffDate: typing.Union[MetaOapg.properties.localCutOffDate, str, datetime, ],
        interval: typing.Union[MetaOapg.properties.interval, str, ],
        approvalDeadlineDate: typing.Union[MetaOapg.properties.approvalDeadlineDate, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, ],
        approverEmployeeId: typing.Union[MetaOapg.properties.approverEmployeeId, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimesheetResponse':
        return super().__new__(
            cls,
            *args,
            approvalDate=approvalDate,
            endDate=endDate,
            timezone=timezone,
            submitDate=submitDate,
            employeeId=employeeId,
            rejectedDate=rejectedDate,
            utcCutOffDate=utcCutOffDate,
            localCutOffDate=localCutOffDate,
            interval=interval,
            approvalDeadlineDate=approvalDeadlineDate,
            id=id,
            startDate=startDate,
            approverEmployeeId=approverEmployeeId,
            status=status,
            note=note,
            updated=updated,
            _configuration=_configuration,
            **kwargs,
        )
