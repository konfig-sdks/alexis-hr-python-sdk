# coding: utf-8

"""
    AlexisHR API

    <h1 id=\"introduction\">Introduction</h1>  <p>    AlexisHR API is currently in preview. This means that small, backward    incompatible changes might be introduced while in preview. The changes will be    documented and communicated.    <a      href=\"https://cdn.forms-content.sg-form.com/56c6a65c-90a2-11eb-a700-a6de1aea3a1a\"      target=\"_blank\"      ><button>Subscribe to updates</button></a    >  </p>    <h1 id=\"authentication\">Authentication</h1>  <pre class=\"click-to-expand-wrapper is-snippet-wrapper language-undefined\">  <code class=\"is-highlighted language-bash\">curl https://api.alexishr.com/v1/employee \\    -H \"Authorization: Bearer &lt;your_access_token&gt;\"</code>  </pre>  <p>    Authenticate your account when using the API by including your secret Access    Token in the request.    <a href=\"https://app.alexishr.com/access-tokens\">Manage your Access Tokens</a    >.  </p>  <p>    Authentication is performed by passing the Access Token in the Authorization    header.  </p>  <hr />    <h1 id=\"structure\">Structure</h1>  <p>    You will find the structure of the API to be highly uniform and consistent.    Typically every resource can be accessed via a top level endpoint, such as    <code>/v1/employee</code>. For every such resource, you can perform some of    the following operations:  </p>  <h2>Operations</h2>  <table>    <tr>      <td>GET /v1/:resource</td>      <td>List all objects of this type</td>    </tr>    <tr>      <td>GET /v1/:resource/:id</td>      <td>Retrieve a resource by id</td>    </tr>    <tr>      <td>POST /v1/:resource</td>      <td>Create a resource of this type</td>    </tr>    <tr>      <td>PATCH /v1/:resource/:id</td>      <td>Update the resource by id</td>    </tr>    <tr>      <td>DELETE /v1/:resource/:id</td>      <td>Delete the resource by id</td>    </tr>  </table>  <hr />    <h1 id=\"roles\">Roles</h1>  <p>The Access Tokens will have owner permission on the account</p>  <hr />    <h1 id=\"filters\">Filters</h1>  <p>    Some of the list endpoints allow to filter results by certain conditions.    Refer to specific resources to find out what criteria are allowed. Below is a    list of the different conditions.  </p>    <h4 id=\"eq\"><code>$eq</code></h4>  <p>Find all results matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$eq]=value</code></pre>  </div>  <p>Can also be simplified like this.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName]=value</code></pre>  </div>    <h4 id=\"neq\"><code>$neq</code></h4>  <p>Find all results not matching the attribute value specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$neq]=value</code></pre>  </div>    <h4 id=\"gt\"><code>$gt</code>, <code>$gte</code></h4>  <p>    Find all results where the value is more (<code>$gt</code>) or more and equal    (<code>$gte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$gte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"lt\"><code>$lt</code>, <code>$lte</code></h4>  <p>    Find all results where the value is less (<code>$lt</code>) or less and equal    (<code>$lte</code>) to a given value.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$lte]=2020-01-01</code></pre>  </div>  <hr />    <h4 id=\"in\"><code>$in</code>, <code>$nin</code></h4>  <p>    Find all results matching (<code>$in</code>) or not matching    (<code>$nin</code>) any of the attribute values specified.  </p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[fieldName][$in][]=value1&filters[fieldName][$in][]=value2</code></pre>  </div>  <hr />    <h4 id=\"between\"><code>$between</code></h4>  <p>Find all results between two values specified.</p>  <div>    <pre><code class=\"language-shell\" data-lang=\"shell\">GET /v1/example?filters[startDate][$between][]=2020-01-01&filters[startDate][$between][]=2020-12-31</code></pre>  </div>  <hr />    <h1 id=\"versioning\">Versioning</h1>  <p>    Each version of the API is guaranteed to be compatible with the resources of    the same version. When we make breaking changes to the API a new version will    be published  </p>  <hr />    <h1 id=\"changelog\">Changelog</h1>  <h3>2023-12-20</h3>  <p>Field [updated] added for filter & select for Get Many Employments and Get Many Employees.</p>  <h3>2021-03-15</h3>  <p>First draft was published</p>  <hr />   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

    The version of the OpenAPI document: v1-preview
    Contact: support@alexishr.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from alexis_hr_python_sdk import schemas  # noqa: F401


class EmployeeResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "companyId",
            "created",
            "active",
            "id",
            "updated",
            "userId",
            "employeeNumber",
        }
        
        class properties:
            id = schemas.StrSchema
            active = schemas.BoolSchema
            companyId = schemas.StrSchema
            userId = schemas.StrSchema
            employeeNumber = schemas.StrSchema
            created = schemas.DateTimeSchema
            updated = schemas.DateTimeSchema
            title = schemas.StrSchema
            officeId = schemas.StrSchema
            managerEmployeeId = schemas.StrSchema
            departmentId = schemas.StrSchema
            costCenterId = schemas.StrSchema
            employmentId = schemas.StrSchema
            employmentTypeId = schemas.StrSchema
            employmentCountry = schemas.StrSchema
            compensationId = schemas.StrSchema
            userName = schemas.StrSchema
            division = schemas.StrSchema
            organization = schemas.StrSchema
        
            @staticmethod
            def tax() -> typing.Type['EmployeeTaxResponse']:
                return EmployeeTaxResponse
            workEmail = schemas.StrSchema
            workPhone = schemas.StrSchema
            workPhoneSanitized = schemas.StrSchema
            hireDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            hasOccupationalPension = schemas.BoolSchema
            privateEmail = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            ssn = schemas.StrSchema
            privatePhone = schemas.StrSchema
            privatePhoneSanitized = schemas.StrSchema
            birthDate = schemas.DateTimeSchema
            age = schemas.NumberSchema
            avatarUrl = schemas.StrSchema
            nationality = schemas.StrSchema
            gender = schemas.StrSchema
            pronoun = schemas.StrSchema
        
            @staticmethod
            def bankAccount() -> typing.Type['BankAccountResponse']:
                return BankAccountResponse
        
            @staticmethod
            def homeAddress() -> typing.Type['HomeAddressResponse']:
                return HomeAddressResponse
            custom = schemas.DictSchema
            __annotations__ = {
                "id": id,
                "active": active,
                "companyId": companyId,
                "userId": userId,
                "employeeNumber": employeeNumber,
                "created": created,
                "updated": updated,
                "title": title,
                "officeId": officeId,
                "managerEmployeeId": managerEmployeeId,
                "departmentId": departmentId,
                "costCenterId": costCenterId,
                "employmentId": employmentId,
                "employmentTypeId": employmentTypeId,
                "employmentCountry": employmentCountry,
                "compensationId": compensationId,
                "userName": userName,
                "division": division,
                "organization": organization,
                "tax": tax,
                "workEmail": workEmail,
                "workPhone": workPhone,
                "workPhoneSanitized": workPhoneSanitized,
                "hireDate": hireDate,
                "endDate": endDate,
                "hasOccupationalPension": hasOccupationalPension,
                "privateEmail": privateEmail,
                "firstName": firstName,
                "lastName": lastName,
                "ssn": ssn,
                "privatePhone": privatePhone,
                "privatePhoneSanitized": privatePhoneSanitized,
                "birthDate": birthDate,
                "age": age,
                "avatarUrl": avatarUrl,
                "nationality": nationality,
                "gender": gender,
                "pronoun": pronoun,
                "bankAccount": bankAccount,
                "homeAddress": homeAddress,
                "custom": custom,
            }
    
    companyId: MetaOapg.properties.companyId
    created: MetaOapg.properties.created
    active: MetaOapg.properties.active
    id: MetaOapg.properties.id
    updated: MetaOapg.properties.updated
    userId: MetaOapg.properties.userId
    employeeNumber: MetaOapg.properties.employeeNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["officeId"]) -> MetaOapg.properties.officeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managerEmployeeId"]) -> MetaOapg.properties.managerEmployeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentId"]) -> MetaOapg.properties.departmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenterId"]) -> MetaOapg.properties.costCenterId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentId"]) -> MetaOapg.properties.employmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentTypeId"]) -> MetaOapg.properties.employmentTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentCountry"]) -> MetaOapg.properties.employmentCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compensationId"]) -> MetaOapg.properties.compensationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["division"]) -> MetaOapg.properties.division: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> 'EmployeeTaxResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEmail"]) -> MetaOapg.properties.workEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneSanitized"]) -> MetaOapg.properties.workPhoneSanitized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hireDate"]) -> MetaOapg.properties.hireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasOccupationalPension"]) -> MetaOapg.properties.hasOccupationalPension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateEmail"]) -> MetaOapg.properties.privateEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privatePhone"]) -> MetaOapg.properties.privatePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privatePhoneSanitized"]) -> MetaOapg.properties.privatePhoneSanitized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["age"]) -> MetaOapg.properties.age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatarUrl"]) -> MetaOapg.properties.avatarUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pronoun"]) -> MetaOapg.properties.pronoun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccount"]) -> 'BankAccountResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeAddress"]) -> 'HomeAddressResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom"]) -> MetaOapg.properties.custom: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "active", "companyId", "userId", "employeeNumber", "created", "updated", "title", "officeId", "managerEmployeeId", "departmentId", "costCenterId", "employmentId", "employmentTypeId", "employmentCountry", "compensationId", "userName", "division", "organization", "tax", "workEmail", "workPhone", "workPhoneSanitized", "hireDate", "endDate", "hasOccupationalPension", "privateEmail", "firstName", "lastName", "ssn", "privatePhone", "privatePhoneSanitized", "birthDate", "age", "avatarUrl", "nationality", "gender", "pronoun", "bankAccount", "homeAddress", "custom", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["officeId"]) -> typing.Union[MetaOapg.properties.officeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managerEmployeeId"]) -> typing.Union[MetaOapg.properties.managerEmployeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentId"]) -> typing.Union[MetaOapg.properties.departmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenterId"]) -> typing.Union[MetaOapg.properties.costCenterId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentId"]) -> typing.Union[MetaOapg.properties.employmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentTypeId"]) -> typing.Union[MetaOapg.properties.employmentTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentCountry"]) -> typing.Union[MetaOapg.properties.employmentCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compensationId"]) -> typing.Union[MetaOapg.properties.compensationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["division"]) -> typing.Union[MetaOapg.properties.division, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union[MetaOapg.properties.organization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union['EmployeeTaxResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEmail"]) -> typing.Union[MetaOapg.properties.workEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneSanitized"]) -> typing.Union[MetaOapg.properties.workPhoneSanitized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hireDate"]) -> typing.Union[MetaOapg.properties.hireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasOccupationalPension"]) -> typing.Union[MetaOapg.properties.hasOccupationalPension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateEmail"]) -> typing.Union[MetaOapg.properties.privateEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privatePhone"]) -> typing.Union[MetaOapg.properties.privatePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privatePhoneSanitized"]) -> typing.Union[MetaOapg.properties.privatePhoneSanitized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> typing.Union[MetaOapg.properties.birthDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["age"]) -> typing.Union[MetaOapg.properties.age, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatarUrl"]) -> typing.Union[MetaOapg.properties.avatarUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationality"]) -> typing.Union[MetaOapg.properties.nationality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pronoun"]) -> typing.Union[MetaOapg.properties.pronoun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccount"]) -> typing.Union['BankAccountResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeAddress"]) -> typing.Union['HomeAddressResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom"]) -> typing.Union[MetaOapg.properties.custom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "active", "companyId", "userId", "employeeNumber", "created", "updated", "title", "officeId", "managerEmployeeId", "departmentId", "costCenterId", "employmentId", "employmentTypeId", "employmentCountry", "compensationId", "userName", "division", "organization", "tax", "workEmail", "workPhone", "workPhoneSanitized", "hireDate", "endDate", "hasOccupationalPension", "privateEmail", "firstName", "lastName", "ssn", "privatePhone", "privatePhoneSanitized", "birthDate", "age", "avatarUrl", "nationality", "gender", "pronoun", "bankAccount", "homeAddress", "custom", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        companyId: typing.Union[MetaOapg.properties.companyId, str, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        updated: typing.Union[MetaOapg.properties.updated, str, datetime, ],
        userId: typing.Union[MetaOapg.properties.userId, str, ],
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        officeId: typing.Union[MetaOapg.properties.officeId, str, schemas.Unset] = schemas.unset,
        managerEmployeeId: typing.Union[MetaOapg.properties.managerEmployeeId, str, schemas.Unset] = schemas.unset,
        departmentId: typing.Union[MetaOapg.properties.departmentId, str, schemas.Unset] = schemas.unset,
        costCenterId: typing.Union[MetaOapg.properties.costCenterId, str, schemas.Unset] = schemas.unset,
        employmentId: typing.Union[MetaOapg.properties.employmentId, str, schemas.Unset] = schemas.unset,
        employmentTypeId: typing.Union[MetaOapg.properties.employmentTypeId, str, schemas.Unset] = schemas.unset,
        employmentCountry: typing.Union[MetaOapg.properties.employmentCountry, str, schemas.Unset] = schemas.unset,
        compensationId: typing.Union[MetaOapg.properties.compensationId, str, schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        division: typing.Union[MetaOapg.properties.division, str, schemas.Unset] = schemas.unset,
        organization: typing.Union[MetaOapg.properties.organization, str, schemas.Unset] = schemas.unset,
        tax: typing.Union['EmployeeTaxResponse', schemas.Unset] = schemas.unset,
        workEmail: typing.Union[MetaOapg.properties.workEmail, str, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, str, schemas.Unset] = schemas.unset,
        workPhoneSanitized: typing.Union[MetaOapg.properties.workPhoneSanitized, str, schemas.Unset] = schemas.unset,
        hireDate: typing.Union[MetaOapg.properties.hireDate, str, datetime, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, schemas.Unset] = schemas.unset,
        hasOccupationalPension: typing.Union[MetaOapg.properties.hasOccupationalPension, bool, schemas.Unset] = schemas.unset,
        privateEmail: typing.Union[MetaOapg.properties.privateEmail, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        privatePhone: typing.Union[MetaOapg.properties.privatePhone, str, schemas.Unset] = schemas.unset,
        privatePhoneSanitized: typing.Union[MetaOapg.properties.privatePhoneSanitized, str, schemas.Unset] = schemas.unset,
        birthDate: typing.Union[MetaOapg.properties.birthDate, str, datetime, schemas.Unset] = schemas.unset,
        age: typing.Union[MetaOapg.properties.age, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        avatarUrl: typing.Union[MetaOapg.properties.avatarUrl, str, schemas.Unset] = schemas.unset,
        nationality: typing.Union[MetaOapg.properties.nationality, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        pronoun: typing.Union[MetaOapg.properties.pronoun, str, schemas.Unset] = schemas.unset,
        bankAccount: typing.Union['BankAccountResponse', schemas.Unset] = schemas.unset,
        homeAddress: typing.Union['HomeAddressResponse', schemas.Unset] = schemas.unset,
        custom: typing.Union[MetaOapg.properties.custom, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeResponse':
        return super().__new__(
            cls,
            *args,
            companyId=companyId,
            created=created,
            active=active,
            id=id,
            updated=updated,
            userId=userId,
            employeeNumber=employeeNumber,
            title=title,
            officeId=officeId,
            managerEmployeeId=managerEmployeeId,
            departmentId=departmentId,
            costCenterId=costCenterId,
            employmentId=employmentId,
            employmentTypeId=employmentTypeId,
            employmentCountry=employmentCountry,
            compensationId=compensationId,
            userName=userName,
            division=division,
            organization=organization,
            tax=tax,
            workEmail=workEmail,
            workPhone=workPhone,
            workPhoneSanitized=workPhoneSanitized,
            hireDate=hireDate,
            endDate=endDate,
            hasOccupationalPension=hasOccupationalPension,
            privateEmail=privateEmail,
            firstName=firstName,
            lastName=lastName,
            ssn=ssn,
            privatePhone=privatePhone,
            privatePhoneSanitized=privatePhoneSanitized,
            birthDate=birthDate,
            age=age,
            avatarUrl=avatarUrl,
            nationality=nationality,
            gender=gender,
            pronoun=pronoun,
            bankAccount=bankAccount,
            homeAddress=homeAddress,
            custom=custom,
            _configuration=_configuration,
            **kwargs,
        )

from alexis_hr_python_sdk.model.bank_account_response import BankAccountResponse
from alexis_hr_python_sdk.model.employee_tax_response import EmployeeTaxResponse
from alexis_hr_python_sdk.model.home_address_response import HomeAddressResponse
